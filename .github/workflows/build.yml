name: Build

on:
  workflow_run:
    workflows: ["Scan"]
    branches: [main]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip pr.zip

      - name: 'Set environment variables'
        run:
          echo "PR_NUMBER=$(cat pr_number)" >> $GITHUB_ENV;
          echo "PR_REF=$(cat pr_ref)" >> $GITHUB_ENV;
          echo "PR_REPO=$(cat pr_repo)" >> $GITHUB_ENV;

      - name: Clone PR
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.PR_REF }}
          repository: ${{ env.PR_REPO }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: |
          npm install --ignore-scripts
          echo "Build success!"

      - name: 'Comment on PR'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            let issue_number = Number(fs.readFileSync('pr_number'));
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `Thank you for the PR! üôè. Please wait for the review.`
            });